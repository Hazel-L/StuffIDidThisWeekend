Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass

// index each iteration and call one after the other until n = 0 with functions


/*
iteration:     step:                     sum:
1.        ---       oneS          ---        2  
2.        ---       twoS          ---        4    
3.        ---       twoP          ---        10   
4.        ---       threeS        ---        12   
5.        ---       threeP        ---        18   
6.        ---       fourS         ---        20   
7.        ---       threeD        ---        30   
8.        ---       fourP         ---        36   
9.        ---       fiveS         ---        38   
10.       ---       fourD         ---        48   
11.       ---       fourF         ---        54   
12.       ---       fiveP         ---        56   
13.       ---       sixS          ---        70   
14.       ---       fiveD         ---        80   
15.       ---       sixP          ---        86   
16.       ---       sevenS        ---        88   
17.       ---       fiveF         ---        102    
18.       ---       sixD          ---        112
19.       ---       sevenP        ---        118 

one   -> 2
two   -> 8
three -> 18  
four  -> 32  
five  -> 32 
six   -> 18
seven -> 2  

s -> 2
p -> 6
d -> 10
f -> 14

You enter n - > start at iteration 1

if n minus the shell you're in is greater than 0, you move to the next shell


if (n>0)
{
}
else if (n == 0)
{
  stop()
}

OneS();  
TwoS();  
TwoP();
ThreeS();
ThreeP();
FourS(); 
ThreeD();
FourP();
FiveS(); 
FourD();
FourF();
FiveP();
SixS();  
FiveD();
SixP();
SevenS();
FiveF();
SixD();

Rubbish
=============================




// index each iteration and call one after the other until n = 0 with functions


/*
iteration:     step:                     sum:
1.        ---       oneS          ---        2  
2.        ---       twoS          ---        4    
3.        ---       twoP          ---        10   
4.        ---       threeS        ---        12   
5.        ---       threeP        ---        18   
6.        ---       fourS         ---        20   
7.        ---       threeD        ---        30   
8.        ---       fourP         ---        36   
9.        ---       fiveS         ---        38   
10.       ---       fourD         ---        48   
11.       ---       fourF         ---        54   
12.       ---       fiveP         ---        56   
13.       ---       sixS          ---        70   
14.       ---       fiveD         ---        80   
15.       ---       sixP          ---        86   
16.       ---       sevenS        ---        88   
17.       ---       fiveF         ---        102    
18.       ---       sixD          ---        112
19.       ---       sevenP        ---         118     

one   -> 2
two   -> 8
three -> 18  
four  -> 32  
five  -> 32 
six   -> 18
seven -> 2  

s -> 2
p -> 6
d -> 10
f -> 14

You enter n - > start at iteration 1

if n minus the shell you're in is greater than 0, you move to the next shell




*/

while (n > 0)
{
OneS();
TwoS();  
TwoP();
ThreeS();
ThreeP();
FourS(); 
ThreeD();
FourP();
FiveS(); 
FourD();
FiveP();
SixS();  
FourF();
FiveD();
SixP();
SevenS();
FiveF();
SixD();
break;
}

OneS();
TwoS();  
TwoP();
ThreeS();
ThreeP();
ThreeD();
FourS();
FourP(); 
FourD();
FourF();
FiveS();
FiveP(); 
FiveD();
FiveF();
SixS();
SixP();
SixD();

/*else if (n <= shell1 && n < shell1 + shell2)
{
  console.log ("1s^" + n);
} 
else if (n > 0 && n <= shell1 + shell2 && n < shell1 + shell2 + shell3)
{
  console.log ("1s^" + 2);
  n = n - twoS;
  console.log ("2s^" + n);
  if (n > twoP)
  {
    n = n - twoP;
    console.log ("2p^" + n);
  }
}
else if (n <= shell1 + shell2 + shell3 && n < shell1 + shell2 + shell3 + shell4)
{
  console.log ("fuck2");
}
else if (n <= shell1 + shell2 + shell3 + shell4 && n < shell1 + shell2 + shell3 + shell4 + shell5)
{
  console.log ("fuck3");
}
else if (n <= shell1 + shell2 + shell3 + shell4 + shell5 && n < shell1 + shell2 + shell3 + shell4 + shell5 + shell6)
{
  console.log ("fuck4");
}
else if (n <= shell1 + shell2 + shell3 + shell4 + shell5 + shell6 && n < shell1 + shell2 + shell3 + shell4 + shell5 + shell6 + shell7)
{
  console.log ("fuck5");
}
else if (n <= shell1 + shell2 + shell3 + shell4 + shell5 + shell6 + shell7)
{
  console.log ("fuck6");
}
else if (n > shell1 + shell2 + shell3 + shell4 + shell5 + shell6 + shell7)
{
  console.log("Enter a valid atomic number [1 - 104]");
}
*/








/*else if (n == 1)
{
  console.log("1s^" + n) // 1s^1
}
else if (n > 2)
{
  workn = workn - oneS;
  workn = Math.abs(workn);
  n = n - workn;
  console.log("1s^" + n)

  if (n > 2 && n >= 0)
  {
    workn = workn - twoS;
    workn = Math.abs(workn);
    n = n - workn;
    console.log("2s^" + n)

    if (n > 2 && n >= 0)
    {
      workn = workn - twoS;
      n = n - workn;
      console.log("2s^" + n)
    }
  } 
} 
*/
  



/*
if (n > 2)
{
  TwoS = 
} 
else if (n == 2)
{
  console.log("1s^2");
}
else if (n == 1)
{
  console.log("1s^1");
}else if (n == 0)
{
  console.log("1s^0");
}






oneS = n;
  console.log("1s^" + oneS);
  n - 2;
  if (n >= 2)
  {
    twoS = 2;
    n - 2;
    console.log("2s^" + oneS);
    if (n < 6)
    {
      twp
    }
  } else if (n == 0)
  {
    twoS = 0;
    console.log("2s^" + twoS);
  }
*/

while (n > 0)
{
  OneS();
  if (n > 0)
  {
    TwoS();
      if (n > 0)
    {
        ThreeS();
        if (n > 0)
      {
        ThreeP();
        if (n > 0)
        {
          FourS();
          if (n > 0)
        {
          ThreeD();
          if (n > 0)
        {
          FourP();
          if (n > 0)
        {
          FiveS();
          if (n > 0)
        {
          FourD();
          if (n > 0)
        {
          FourF();
          if (n > 0)
        {
          FiveP();
          if (n > 0)
        {
          SixS();
          if (n > 0)
        {
          FiveD();
          if (n > 0)
        {
          SixP();
          if (n > 0)
        {
          SevenS();
          if (n > 0)
        {
          FiveF();
          if (n > 0)
        {
          SixD();
          
                                }else break;
                              }else break;
                            }else break;
                          }else break;
                        }else break;
                      }else break;
                    }else break;
                  }else break;
                }else break;
              }else break;
            }else break;
          }else break;
        }else break;
      }else break;
    }else break;
  }else break;
}

while (n>0)
{
OneS();
if (n == 0)
{
  break;
}
TwoS();  
if (n == 0)
{
  break;
}
TwoP();
if (n == 0)
{
  break;
}
ThreeS();
if (n == 0)
{
  break;
}
ThreeP();
if (n == 0)
{
  break;
}
FourS();
if (n == 0)
{
  break;
}
ThreeD();
if (n == 0)
{
  break;
}
FourP();
if (n == 0)
{
  break;
}
FiveS(); 
if (n == 0)
{
  break;
}
FourD();
if (n == 0)
{
  break;
}
FourF();
if (n == 0)
{
  break;
}
FiveP();
if (n == 0)
{
  break;
}
SixS();
if (n == 0)
{
  break;
}
FiveD();
if (n == 0)
{
  break;
}
SixP();
if (n == 0)
{
  break;
}
SevenS();
if (n == 0)
{
  break;
}
FiveF();
if (n == 0)
{
  break;
}
SixD();
if (n == 0)
{
  break;
}
}

Z=83 -> Bismuth

1s^2
2s^2
2p^6
3s^2
3p^6
4s^2
3d^10
4p^6
5s^2
4d^10
5p^6
6s^2
4f^14
5d^10
6p^3

Z = 